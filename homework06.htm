<html>
  <head>
    <meta charset="utf-8"/>
    <title>Comp 425 Homework</title>
    <link rel="stylesheet" href="../standard.css" type="text/css"/>
    <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    <base target="_top"/>
    <style>
      ol > li { margin-bottom: 2em; }
      ol ol > li, ol ul > li { margin: 0.5em 0; }
      ol { list-style-type: decimal; }
      ol ol { list-style-type: lower-alpha; }
      .svg { height: 12em; display: block; }
      .figure {
          padding: 1em;
          border: 1px solid black;
      }
      .figure .source {
          font-size: 9pt;
          padding-top: 2pt;
      }
      .right { float: right; margin-left: 1em; }
      .left { float: left; margin-right: 1em; }
      h3 { clear: both; padding-top: 1em; }
    </style>
  </head>
  <body>
        Write a program which takes two vectors, \(\mathbf{a}\) and
        \(\mathbf{b}\), and a scalar, \(x\), and then calculates \(\mathbf{a}x
        + \mathbf{b}\).
        For example, if \(\mathbf{a} = \{ 1, 2, 3, 4 \}\), and \(\mathbf{b} = \{
        1, 0, -1, 2 \}\), and \(x = 10\), then your answer should be
        \(\{1{\cdot}10 + 1, 2{\cdot}10 + 0, 3{\cdot}10 - 1, 4{\cdot}10 + 2 \} =
        \{ 11, 20, 29, 42 \}\).

        <p>
          <em>All numbers should be of type <code>double</code>.</em>
        </p>
        <ol>
          <li>First write the program as a normal, sequential C++
            program. Your input should be
            <ul>
              <li>The size of the vectors</li>
              <li>All the elements of \(\mathbf{a}\)</li>
              <li>All the elements of \(\mathbf{b}\)</li>
            </ul>
            Your output should be the answer, all on one line with a single space
            following each number.  For example, given this input:
            <pre class="example">
4
1 2 3 4
1 0 -1 2
10
</pre>
            your program should have this output:
            <pre class="example">11 20 29 42</pre>
          </li>
          <li>
            Now add code to time how long it takes to perform the
            calculations.  You should not include I/O in your time; i.e.,
            start timing immediately after reading in the input, and stop
            immediately before you output the result.  After you output the
            result you should print the time it took in nanoseconds
            to <code>cerr</code>.
          </li>
          <li>
            Compile your program in &ldquo;Release&rdquo; mode.
            Run your program on vectors of size 1,000,000 and see how long it
            takes.  To do this you should generate an input file where all the
            numbers are picked randomly between -10,000 and 10,000.
          </li>
          <li>
            Add OpenMP directives to run your calculation in parallel.  Use
            the <code>OMP_NUM_THREADS</code> environment variable to run your
            program with the vectors of size 1,000,000 with:
            <ul>
              <li>1 thread</li>
              <li>2 threads</li>
              <li>4 threads</li>
              <li>8 threads</li>
              <li>16 threads</li>
              <li>32 threads</li>
              <li>64 threads</li>
            </ul>
            Record the time it takes for each.
          </li>
          <li>
            Submit your code and a text file that reports your times.
          </li>
    </ol>
  </body>
</html>
